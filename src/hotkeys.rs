use iced::keyboard::{
    Modifiers,
    key::{Code, Physical},
};

pub fn iced_key_to_livesplit_hotkey(
    key: Physical,
    mods: iced::keyboard::Modifiers,
) -> Option<livesplit_core::hotkey::Hotkey> {
    use livesplit_core::hotkey::KeyCode::*;
    let key = match key {
        Physical::Code(code) => match code {
            Code::Backquote => Some(Backquote),
            Code::Backslash => Some(Backslash),
            Code::BracketLeft => Some(BracketLeft),
            Code::BracketRight => Some(BracketRight),
            Code::Comma => Some(Comma),
            Code::Digit0 => Some(Digit0),
            Code::Digit1 => Some(Digit1),
            Code::Digit2 => Some(Digit2),
            Code::Digit3 => Some(Digit3),
            Code::Digit4 => Some(Digit4),
            Code::Digit5 => Some(Digit5),
            Code::Digit6 => Some(Digit6),
            Code::Digit7 => Some(Digit7),
            Code::Digit8 => Some(Digit8),
            Code::Digit9 => Some(Digit9),
            Code::Equal => Some(Equal),
            Code::IntlBackslash => Some(IntlBackslash),
            Code::IntlRo => Some(IntlRo),
            Code::IntlYen => Some(IntlYen),
            Code::KeyA => Some(KeyA),
            Code::KeyB => Some(KeyB),
            Code::KeyC => Some(KeyC),
            Code::KeyD => Some(KeyD),
            Code::KeyE => Some(KeyE),
            Code::KeyF => Some(KeyF),
            Code::KeyG => Some(KeyG),
            Code::KeyH => Some(KeyH),
            Code::KeyI => Some(KeyI),
            Code::KeyJ => Some(KeyJ),
            Code::KeyK => Some(KeyK),
            Code::KeyL => Some(KeyL),
            Code::KeyM => Some(KeyM),
            Code::KeyN => Some(KeyN),
            Code::KeyO => Some(KeyO),
            Code::KeyP => Some(KeyP),
            Code::KeyQ => Some(KeyQ),
            Code::KeyR => Some(KeyR),
            Code::KeyS => Some(KeyS),
            Code::KeyT => Some(KeyT),
            Code::KeyU => Some(KeyU),
            Code::KeyV => Some(KeyV),
            Code::KeyW => Some(KeyW),
            Code::KeyX => Some(KeyX),
            Code::KeyY => Some(KeyY),
            Code::KeyZ => Some(KeyZ),
            Code::Minus => Some(Minus),
            Code::Period => Some(Period),
            Code::Quote => Some(Quote),
            Code::Semicolon => Some(Semicolon),
            Code::Slash => Some(Slash),
            Code::AltLeft => Some(AltLeft),
            Code::AltRight => Some(AltRight),
            Code::Backspace => Some(Backspace),
            Code::CapsLock => Some(CapsLock),
            Code::ContextMenu => Some(ContextMenu),
            Code::ControlLeft => Some(ControlLeft),
            Code::ControlRight => Some(ControlRight),
            Code::Enter => Some(Enter),
            Code::SuperLeft => Some(MetaLeft),
            Code::SuperRight => Some(MetaRight),
            Code::ShiftLeft => Some(ShiftLeft),
            Code::ShiftRight => Some(ShiftRight),
            Code::Space => Some(Space),
            Code::Tab => Some(Tab),
            Code::Convert => Some(Convert),
            Code::KanaMode => Some(KanaMode),
            Code::Lang1 => Some(Lang1),
            Code::Lang2 => Some(Lang2),
            Code::Lang3 => Some(Lang3),
            Code::Lang4 => Some(Lang4),
            Code::Lang5 => Some(Lang5),
            Code::NonConvert => Some(NonConvert),
            Code::Delete => Some(Delete),
            Code::End => Some(End),
            Code::Help => Some(Help),
            Code::Home => Some(Home),
            Code::Insert => Some(Insert),
            Code::PageDown => Some(PageDown),
            Code::PageUp => Some(PageUp),
            Code::ArrowDown => Some(ArrowDown),
            Code::ArrowLeft => Some(ArrowLeft),
            Code::ArrowRight => Some(ArrowRight),
            Code::ArrowUp => Some(ArrowUp),
            Code::NumLock => Some(NumLock),
            Code::Numpad0 => Some(Numpad0),
            Code::Numpad1 => Some(Numpad1),
            Code::Numpad2 => Some(Numpad2),
            Code::Numpad3 => Some(Numpad3),
            Code::Numpad4 => Some(Numpad4),
            Code::Numpad5 => Some(Numpad5),
            Code::Numpad6 => Some(Numpad6),
            Code::Numpad7 => Some(Numpad7),
            Code::Numpad8 => Some(Numpad8),
            Code::Numpad9 => Some(Numpad9),
            Code::NumpadAdd => Some(NumpadAdd),
            Code::NumpadBackspace => Some(NumpadBackspace),
            Code::NumpadClear => Some(NumpadClear),
            Code::NumpadClearEntry => Some(NumpadClearEntry),
            Code::NumpadComma => Some(NumpadComma),
            Code::NumpadDecimal => Some(NumpadDecimal),
            Code::NumpadDivide => Some(NumpadDivide),
            Code::NumpadEnter => Some(NumpadEnter),
            Code::NumpadEqual => Some(NumpadEqual),
            Code::NumpadHash => Some(NumpadHash),
            Code::NumpadMemoryAdd => Some(NumpadMemoryAdd),
            Code::NumpadMemoryClear => Some(NumpadMemoryClear),
            Code::NumpadMemoryRecall => Some(NumpadMemoryRecall),
            Code::NumpadMemoryStore => Some(NumpadMemoryStore),
            Code::NumpadMemorySubtract => Some(NumpadMemorySubtract),
            Code::NumpadMultiply => Some(NumpadMultiply),
            Code::NumpadParenLeft => Some(NumpadParenLeft),
            Code::NumpadParenRight => Some(NumpadParenRight),
            Code::NumpadStar => Some(NumpadStar),
            Code::NumpadSubtract => Some(NumpadSubtract),
            Code::Escape => Some(Escape),
            Code::Fn => Some(Fn),
            Code::FnLock => Some(FnLock),
            Code::PrintScreen => Some(PrintScreen),
            Code::ScrollLock => Some(ScrollLock),
            Code::Pause => Some(Pause),
            Code::BrowserBack => Some(BrowserBack),
            Code::BrowserFavorites => Some(BrowserFavorites),
            Code::BrowserForward => Some(BrowserForward),
            Code::BrowserHome => Some(BrowserHome),
            Code::BrowserRefresh => Some(BrowserRefresh),
            Code::BrowserSearch => Some(BrowserSearch),
            Code::BrowserStop => Some(BrowserStop),
            Code::Eject => Some(Eject),
            Code::LaunchApp1 => Some(LaunchApp1),
            Code::LaunchApp2 => Some(LaunchApp2),
            Code::LaunchMail => Some(LaunchMail),
            Code::MediaPlayPause => Some(MediaPlayPause),
            Code::MediaSelect => Some(MediaSelect),
            Code::MediaStop => Some(MediaStop),
            Code::MediaTrackNext => Some(MediaTrackNext),
            Code::MediaTrackPrevious => Some(MediaTrackPrevious),
            Code::Power => Some(Power),
            Code::Sleep => Some(Sleep),
            Code::AudioVolumeDown => Some(AudioVolumeDown),
            Code::AudioVolumeMute => Some(AudioVolumeMute),
            Code::AudioVolumeUp => Some(AudioVolumeUp),
            Code::WakeUp => Some(WakeUp),
            Code::Again => Some(Again),
            Code::Copy => Some(Copy),
            Code::Cut => Some(Cut),
            Code::Find => Some(Find),
            Code::Open => Some(Open),
            Code::Paste => Some(Paste),
            Code::Props => Some(Props),
            Code::Select => Some(Select),
            Code::Undo => Some(Undo),
            Code::Hiragana => Some(Lang3),
            Code::Katakana => Some(Lang2),
            Code::F1 => Some(F1),
            Code::F2 => Some(F2),
            Code::F3 => Some(F3),
            Code::F4 => Some(F4),
            Code::F5 => Some(F5),
            Code::F6 => Some(F6),
            Code::F7 => Some(F7),
            Code::F8 => Some(F8),
            Code::F9 => Some(F9),
            Code::F10 => Some(F10),
            Code::F11 => Some(F11),
            Code::F12 => Some(F12),
            Code::F13 => Some(F13),
            Code::F14 => Some(F14),
            Code::F15 => Some(F15),
            Code::F16 => Some(F16),
            Code::F17 => Some(F17),
            Code::F18 => Some(F18),
            Code::F19 => Some(F19),
            Code::F20 => Some(F20),
            Code::F21 => Some(F21),
            Code::F22 => Some(F22),
            Code::F23 => Some(F23),
            Code::F24 => Some(F24),
            _ => None,
        },
        Physical::Unidentified(_) => None,
    };

    let mut lsmods = livesplit_core::hotkey::Modifiers::empty();

    if Modifiers::shift(mods) {
        lsmods |= livesplit_core::hotkey::Modifiers::SHIFT;
    }

    if Modifiers::control(mods) {
        lsmods |= livesplit_core::hotkey::Modifiers::CONTROL;
    }

    if Modifiers::alt(mods) {
        lsmods |= livesplit_core::hotkey::Modifiers::ALT;
    }

    if Modifiers::logo(mods) {
        lsmods |= livesplit_core::hotkey::Modifiers::META;
    }

    key.map(|key| livesplit_core::hotkey::Hotkey {
        key_code: key,
        modifiers: lsmods,
    })
}
